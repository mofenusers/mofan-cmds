#!/usr/bin/env node
const program = require("commander");
const shelljs = require("../utils/shelljsUtil");
const { ask } = require("../utils/inquireUtil");
const { askFortargetBranchs } = require("../utils/config");

const typeQuestions = [
  {
    type: "list",
    name: "commitType",
    message: "commit的类型",
    choices: [
      {
        name: "feat",
        value: "feat",
        checked: true,
      },
      {
        name: "fix",
        value: "fix",
      },
      {
        name: "style",
        value: "style",
      },
      {
        name: "docs",
        value: "docs",
      },
      {
        name: "pref",
        value: "pref",
      },
      {
        name: "build",
        value: "build",
      },
      {
        name: "revert",
        value: "revert",
      },
      {
        name: "refactor",
        value: "refactor",
      },
    ],
  },
];

const descQuestion = [
  {
    type: "input",
    name: "desc",
    message: "commit的描述",
  },
];

const batchMergeQuestion = [
  {
    type: "confirm",
    name: "batchMerge",
    message: "是否更新代码至远程环境分支",
  },
];

const batchMergeFn = () => {
  const { stdout } = shelljs.exec(`git branch --show-current`);
  const currentBranch = stdout.replace("\n", "");

  return ask([
    {
      type: "confirm",
      name: "batchMergeConfirm",
      message: `你当前在${currentBranch}分支，确认更新代码至环境分支吗？`,
    },
  ]).then(({ batchMergeConfirm }) => {
    return {
      batchMergeConfirm,
      currentBranch,
    };
  });
};

program
  .action(function () {
    const run = (commitType, desc) => {
      shelljs.exec(`git add .`);
      shelljs.exec(`git commit -m "${commitType}: ${desc}"`);

      shelljs.exec(`git pull`);
      shelljs.exec(`git push`);
      shelljs.exec(`git status`);
    };

    ask(typeQuestions)
      .then((answer) => {
        const { commitType } = answer;
        return ask(descQuestion).then(({ desc }) => run(commitType, desc));
      })
      .then(() => {
        return ask(batchMergeQuestion).then(
          ({ batchMerge }) => batchMerge && batchMergeFn()
        );
      })
      .then(({ batchMergeConfirm, currentBranch }) => {
        if (batchMergeConfirm) {
          return askFortargetBranchs().then(({ gitBranchs }) => {
            shelljs.exec(
              `mofancmds batchmerge -s ${currentBranch} -t ${gitBranchs.join(
                " "
              )}`
            );
          });
        } else {
          shelljs.exit(1);
        }
      });
  })
  .parse(process.argv);
