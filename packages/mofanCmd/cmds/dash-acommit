#!/usr/bin/env node
const program = require("commander");
const shelljs = require("../utils/shelljsUtil");
const { targetBranchQuestions } = require("../utils/config");
const { ask } = require("../utils/inquireUtil");

const typeQuestions = [
  {
    type: "list",
    name: "commitType",
    message: "commit的类型",
    choices: [
      {
        name: "feat",
        value: "feat",
        checked: true,
      },
      {
        name: "fix",
        value: "fix",
      },
      {
        name: "style",
        value: "style",
      },
      {
        name: "docs",
        value: "docs",
      },
      {
        name: "pref",
        value: "pref",
      },
      {
        name: "build",
        value: "build",
      },
    ],
  },
];

const descQuestion = [
  {
    type: "input",
    name: "desc",
    message: "commit的描述",
  },
];

const updateCodeQuestion = [
  {
    type: "confirm",
    name: "updateCode",
    message: "是否更新代码至远程环境分支",
  },
];

const updateCodeFn = () => {
  const { code, stdout, stderr } = shelljs.exec(`git branch --show-current`);
  const currentBranch = stdout.replace("\n", "");
  console.log(
    "🚀 ~ file: dash-acommit:62 ~ updateCodeFn ~ stdout:",
    currentBranch
  );
  console.log(
    "🚀 ~ file: dash-acommit:66 ~ exec ~ currentBranch:",
    currentBranch
  );
  if (code !== 0) {
    // handle your error
    console.error(
      "🚀 ~ file: dash-updateCode:43 ~ gitBranchs.forEach ~ error",
      stderr
    );
    shelljs.exit(1);
  }
  return ask([
    {
      type: "confirm",
      name: "updateCodeConfirm",
      message: `你当前在${currentBranch}分支，确认更新代码至环境分支吗？`,
    },
  ]).then(({ updateCodeConfirm }) => {
    return {
      updateCodeConfirm,
      currentBranch,
    };
  });
};

program
  .action(function () {
    const run = (commitType, desc) => {
      shelljs.exec(`git add .`);
      const { code, stderr } = shelljs.exec(
        `git commit -m "${commitType}: ${desc}"`
      );

      if (code !== 0) {
        console.error(
          "🚀 ~ file: dash-updateCode:43 ~ gitBranchs.forEach ~ error",
          stderr
        );
        shelljs.exit(1);
      } else {
        // shelljs.exec(`git push`);
        shelljs.exec(`git status`);
      }
    };

    ask(typeQuestions)
      .then((answer) => {
        const { commitType } = answer;
        return ask(descQuestion).then(({ desc }) => run(commitType, desc));
      })
      .then(() => {
        return ask(updateCodeQuestion).then(
          ({ updateCode }) => updateCode && updateCodeFn()
        );
      })
      .then(({ updateCodeConfirm, currentBranch }) => {
        if (updateCodeConfirm) {
          return ask(targetBranchQuestions).then(({ gitBranchs }) => {
            console.log(
              "🚀 ~ file: dash-acommit:120 ~ returnask ~ `mofancmds ubmerge -s ${stdout} -t ${gitBranchs.join()}`:",
              `mofancmds ubmerge -s ${currentBranch} -t ${gitBranchs}`
            );
            shelljs.exec(
              `mofancmds ubmerge -s ${currentBranch} -t ${gitBranchs.join(" ")}`
            );
          });
        } else {
          shelljs.exit(1);
        }
      });
  })
  .parse(process.argv);
