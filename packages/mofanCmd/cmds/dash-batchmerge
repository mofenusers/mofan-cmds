#!/usr/bin/env node
const program = require("commander");
const shelljs = require("../utils/shelljsUtil");
const { spawn } = require('child_process');
const { askFortargetBranchs } = require("../utils/config");

// const jenkinsUrl = (app, env) =>
//   `http://192.168.0.163:8080/job/tenant-fe/job/${env}/job/${app}/build?token=jenkins-szhtxx-token `;

// 创建一个子进程来执行合并操作
function executeBranch(branch, source_branch) {
  return new Promise((resolve, reject) => {
    const child = spawn(`ls && git checkout ${branch} && git merge ${source_branch}`);

    // 输出子进程的输出
    child.stdout.on('data', (data) => {
      console.log(`子进程输出: ${data}`);
    });

    // 子进程错误信息
    child.stderr.on('data', (data) => {
      console.error(`子进程错误: ${data}`);
    });

    // 获取命令输出
    child.on('close', (code) => {
      console.log('stdout: ' + child.stdout.data);
      console.log('stderr: ' + child.stderr.data);
    });
  });
}

program
  .option("-s, --source <source>", "source branch")
  .option("-t, --targets [targets...]", "target branch")
  .action(function ({ source, targets }, args) {
    const run = (branchs, sourceBranch) => {
      Promise.all(
        branchs.map(branch => executeBranch(branch, sourceBranch))
      )
        .then(results => {
          console.log(`Successfully merged $source_branch into ${branchs}`);
          console.log(`Results: ${results}`);
        })
        .catch(error => {
          console.error(`Failed to merge ${sourceBranch} into ${branchs}\nError: ${error}`);
        });
    };

    const dealwithBranchs = (targetBranchs, sourceBranch) => {
      if (targetBranchs && targetBranchs.length) {
        run(targetBranchs, sourceBranch);
      } else {
        askFortargetBranchs().then((answer) => {
          const { gitBranchs } = answer;
          run(gitBranchs, sourceBranch);
        });
      }
    };

    dealwithBranchs(targets, source);
  })
  .parse(process.argv);

